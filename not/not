
npm i @gorhom/bottom-sheet komutu, @gorhom/bottom-sheet adlı bir npm paketini projenize eklemek için kullanılır. Bu paket, alt sayfa veya alt kart gibi içerikleri göstermek için kullanılan bir alt sayfa (bottom sheet) bileşeni sağlar. Bottom sheet, kullanıcıya daha fazla içeriği göstermek veya bir seçenek setini sunmak için ekranın alt kısmında beliren bir arayüz öğesidir.

@gorhom/bottom-sheet paketi, React Native projeleri için geliştirilmiş ve kullanımı oldukça basit bir alt sayfa bileşeni sunar. Bu tür bir bileşen, kullanıcının ekranın altından yukarıya doğru kaydırarak veya belirli bir olay tetiklendiğinde açılabilir. Genellikle sayfa içeriğini kapatmadan ek bir içeriği göstermek için kullanılır.

Kurulumu yaptıktan sonra, belirli bir olay veya kullanıcı etkileşimi ile alt sayfayı açabilir ve isteğe bağlı olarak içeriğini özelleştirebilirsiniz. Detaylı kullanım talimatlarına ve örnek kodlara @gorhom/bottom-sheet paketinin resmi belgelerinden veya örnek projelerinden ulaşabilirsiniz.
Hata aldik sonra   https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/

 1 npx expo install react-native-reanimated
 2"react-native-reanimated/plugin" bunu babel yapistirdik 
 3npx expo start -c

 import React from 'react';

const MyFlatList = () => {
  const data = [
    { id: '1', title: 'Item 1' },
    { id: '2', title: 'Item 2' },
    { id: '3', title: 'Item 3' },
    // ... Diğer öğeler
  ];

  const renderItem = ({ item }) => (
    <View>
      <Text>{item.title}</Text>
    </View>
  );

  const keyExtractor = (item) => item.id;

  return (
    <FlatList
      data={data}
      renderItem={renderItem}
      keyExtractor={keyExtractor}
    />
  );
};

export default MyFlatList;
useSharedValue fonksiyonu, bir değeri paylaşılan bir değer (shared value) haline getirir. Paylaşılan değerler, animasyonların ve diğer interaktif öğelerin değerlerini kontrol etmek için kullanılır. Bu değerler, işletim sistemi iş parçacığı dışında bulunan bir çalışma zamanında saklanır ve bu nedenle performanslı animasyonlar elde etmek için kullanılır.

Örneğin, useSharedValue fonksiyonunu kullanarak bir genişlik değeri oluşturabilir ve bu değeri animasyonlu bir şekilde güncelleyebilirsiniz. Aşağıdaki örnek, bir paylaşılan değeri genişlik (width) değeri olarak kullanarak bir View'in genişliğini animasyonlu bir şekilde değiştirir:

import React from 'react';
import { View, Text, Button } from 'react-native';
import { useSharedValue, withSpring } from 'react-native-reanimated';

const AnimatedView = () => {
  const flexWidth = useSharedValue(0);

  const handleAnimate = () => {
    flexWidth.value = withSpring(300, {}, (isFinished) => {
      // Animasyon tamamlandığında yapılacak işlemler
      if (isFinished) {
        console.log('Animasyon tamamlandı!');
      }
    });
  };

  return (
    <View>
      <View
        style={{
          width: flexWidth.value,
          height: 100,
          backgroundColor: 'blue',
        }}
      >
        <Text>Animasyonlu View</Text>
      </View>
      <Button title="Animate" onPress={handleAnimate} />
    </View>
  );
};

export default AnimatedView;
Bu örnekte, flexWidth adlı paylaşılan bir değer oluşturuluyor. Ardından, bir animasyon tetiklendiğinde flexWidth.value değeri, belirli bir animasyon efekti kullanılarak güncelleniyor. Bu, animasyonlu bir genişlik değişikliğine neden olur.





https://console.cloud.google.com/apis/credentials?project=delivery-408723 burdan google map apii keu  aldik ve 
crendential  gitiribce api key var uyerine tila vr  API restrictions bunu ltindaki ikondan resrtiy key secip once places api yazip soleyleyip sonra libray etkinletirip burada tekraradan aratip okeyleyip save yapiyorsun
somraandoid secilip devam ediluor
https://github.com/FaridSafi/react-native-google-places-autocompleteburdan aiyur complete zptik

<ScrollView> genellikle React Native'de kullanılan bir bileşendir ve bir dizi içeriği (genellikle diğer bileşenleri veya görüntüleri) dikey olarak kaydırmak için kullanılır. 

import { SafeAreaView } from 'react-native-safe-area-context'
npm install react-native-safe-area-context

SafeAreaView bileşiği, React Native'de genellikle ekranın kenarlarına veya üst kısmına yerleştirilen diğer bileşenlerin, özellikle de iPhone X ve sonrasındaki cihazlardaki çentik veya altındaki ekranın altındaki sensör çubuğu gibi özel bölgelere karşı güvenli bir şekilde yerleştirilmesini sağlamak için kullanılır.

Bu bileşik, cihazın fiziksel kenarlarına yakın olan bileşenleri, çentik, kenar veya altındaki sensör çubuğu gibi bölgelerden uzak tutarak, içerideki içeriğin kesilmemesini sağlar. Bu, özellikle iOS cihazlarında önemlidir, çünkü bazı cihazlarda çentik veya sensör çubuğu ekranın bir kısmını kaplar ve içeriği bu bölgelerle örtmemek önemlidir.
********
<ScrollView horizontal> kodu, genellikle bir kullanıcı arayüzü oluştururken yatay olarak kaydırılabilir içerikleri içeren bir bileşeni tanımlamak için kullanılır. 
User
 <ScrollView horizontal showsVerticalScrollIndicator={false}>  
 showsVerticalScrollIndicator prop'unu, dikey kaydırma çubuğunun gösterilip gösterilmeyeceğini kontrol etmek için kullanabilirsiniz. Ancak, <ScrollView> öğesinin yatay yönde kaydırılabilir olduğu bir durumda, dikey kaydırma çubuğu genellikle gereksizdir. Bu nedenle, showsVerticalScrollIndicator={false} kullanarak dikey kaydırma çubuğunu gizleyebilirsiniz.

 ***************
 
TouchableOpacity, React Native uygulamalarında kullanıcı etkileşimleri için kullanılan bir dokunma (tıklama) öğesidir

*******************

asChild prop'u, Link bileşenini kullanırken, bir bağlantıyı sadece bir çocuk öğe (child) olarak ele almasını sağlar. Bu, bağlantıya ek özellikler eklemek veya özel davranışlar uygulamak istediğinizde kullanışlıdır.

Normalde, Link bileşeni bir dokümanın içinde bir bağlantıyı temsil etmek için kullanılır ve içerideki tüm öğeleri bir bağlantıyı takip eden öğeler olarak ele alır. Ancak, bazen bir bağlantının yalnızca bir öğe (örneğin bir düğme veya bir resim) olmasını ve tıklama olaylarını bu öğe üzerinde yönetmeyi tercih edebilirsiniz. İşte bu durumda asChild prop'u devreye girer.
import React from "react";
import { Link } from "expo-router";

const ExampleComponent = () => {
  return (
    <Link href="/details" asChild>
      <button>Detayları Görüntüle</button>
    </Link>
  );
};

export default ExampleComponent;
Bu örnekte, asChild prop'u kullanılarak <button> öğesi, Link bileşeninin içinde yalnızca bir çocuk öğe olarak ele alınır ve bağlantının tıklama olayları bu düğme üzerinde yönetilir. Bu, özel bir tasarım veya özel davranışa sahip bir bağlantı oluşturmanın bir yoludur.ben burda reataurant tilayinca dertailsr gitemdi bende bunu unutmusum 
****************
******************
<ParallaxScrollView/> bunu ilk olrak details cagirfik hata olduk bunum coymek icin consoldaki hatafdanbulduk 
bir npm yukledik 
https://github.com/i6mi6/react-native-parallax-scroll-view doc 
sonra parallax stules olan require iolln yeride sildik dikkat et
npm i deprecated-react-native-prop-types
npm i deprecated-react-native-prop-types@2.2.0
******************DEATIKS KULLANDIK
navigation.setOptions fonksiyonu, bir ekranın navigasyon seçeneklerini güncellemek için kullanılır. Bu fonksiyon, genellikle bir ekranın başlık çubuğunu, başlık rengini, geçiş animasyonlarını veya diğer navigasyon seçeneklerini değiştirmek için kullanılır.

Örneğin, sizin verdiğiniz örnekte headerTransparent özelliği kullanılarak başlık çubuğunun arka planını şeffaf (transparent) hale getirilmiştir. Bu, genellikle bir ekranın üst kısmında başlık çubuğu olmasına rağmen, içerik alanının başlığın altına geçmesini sağlamak için kullanılır. Bu, ekran tasarımını özelleştirmek ve görünümü değiştirmek istediğinizde kullanışlı bir özelliktir.


*****************************

useSharedValue fonksiyonu, React Native'de animasyonlar ve Reanimated 2 kütüphanesi ile birlikte kullanılan bir özel bir "paylaşılan değer" (shared value) hook'udur. Bu hook, animasyon değerlerini paylaşmak ve bu değerler üzerinde çalışmak için kullanılır.

Özellikle Reanimated 2 ile birlikte, animasyonlar performans ve kullanım açısından daha avantajlı bir şekilde yönetilebilir. useSharedValue fonksiyonu, animasyonun değerini bir "paylaşılan değer"e dönüştürür ve bu değeri güncelleyerek animasyonu kontrol etmenizi sağlar.

Örnek kullanım:

jsx
Copy code
import { useSharedValue } from 'react-native-reanimated';

const opacity = useSharedValue(0);

// opacity değerini güncelleyerek animasyonu kontrol etme
opacity.value = 1;
Bu örnekte, opacity adında bir paylaşılan değer oluşturulmuştur ve başlangıçta değeri 0 olarak ayarlanmıştır. Ardından, bu değer güncellenerek animasyon kontrol edilebilir. Bu paylaşılan değer, animasyonlarınızın çeşitli özelliklerini dinamik olarak değiştirmenizi sağlar.

Reanimated 2 kullanarak animasyonlar yapmak için, bu paylaşılan değerleri kullanarak çeşitli animasyon işlemleri gerçekleştirebilirsiniz. Örneğin, withSpring, withTiming gibi fonksiyonlar kullanılarak bu paylaşılan değerlerle çeşitli animasyon efektleri oluşturabilirsiniz.
Bu durumda () => ({ opacity: opacity.value }) ifadesi, bir fonksiyon ifadesidir ve bu fonksiyon bir nesne ifadesini içerir. useAnimatedStyle fonksiyonu bu ifadeyi değer olarak alır ve animasyonlu bir stil oluşturur.
***********************************

TouchableOpacity içindeki ref kullanımının amacı, her bir öğeye erişmek ve bu öğelerle etkileşimde bulunmak için bir referans oluşturmaktır. ScrollView içindeki öğeleri takip etmek ve belirli bir öğeye erişim sağlamak için ref kullanılır.

Burada itemsRef adlı bir referans nesnesi oluşturulmuş ve her öğe için bir referans atanıyor. itemsRef.current[index] = ref! ifadesi ile her öğe için bir referans elde edilmiş olur ve bu referanslar daha sonra başka bir yerde kullanılabilir.

Bu tip kullanım özellikle dinamik olarak oluşturulan öğelerle çalışırken yararlıdır. Örneğin, belirli bir öğenin boyutunu veya konumunu programatik olarak ayarlamak veya belirli bir öğeye odaklanmak için bu referansları kullanabilirsiniz.

Ayrıca, ref kullanımı, öğelerle etkileşimde bulunmak veya belirli bir öğeye odaklanmak gibi durumlar için geniş bir uygulama alanına sahiptir ve her duruma göre farklı kullanımları olabilir.
******************************
SafeAreaView bileşeni, ekranın kenarlarına yerleşik sistem çubukları veya diğer platform öğeleri tarafından kaplanabilecek içeriği sınırlamak için kullanılır. Bu bileşen, içeriğin ekran kenarlarına zarar görmesini önler ve içeriği kullanılabilir alan içinde tutar.

edges prop'u, SafeAreaView'ın hangi kenarları koruması gerektiğini belirten bir dizi değer alır. Bu prop, aşağıdaki değerleri alabilir:

'top': Üst kenarı korur.
'bottom': Alt kenarı korur.
'left': Sol kenarı korur.
'right': Sağ kenarı korur.
Yani, <SafeAreaView edges={["bottom"]}> ifadesiyle, sadece alt kenarın ('bottom') korunmasını sağlıyorsunuz. Bu özellik, özellikle alt çubuk veya navigasyon çubuğu gibi platforma özgü arayüz öğeleri ekranın alt kısmını kapladığında kullanışlıdır. Bu sayede, içerik bu kenarları aşındırmadan güvenli bir şekilde görüntülenebilir.

********************************
bu yuledik  npx expo install expo-haptics
expo-haptics, Expo SDK içinde sunulan bir modüldür ve haptik geri bildirim (haptic feedback) sağlamak için kullanılır. Haptik geri bildirim, kullanıcının dokunmatik bir cihaz üzerinde etkileşimde bulunduğunda hissettiği titreşim veya dokunsal geri bildirimdir. Bu, kullanıcının bir düğmeye basma, bir işlem gerçekleştirme veya bir olaya tepki olarak bir titreşim hissetmesini sağlayarak kullanıcı deneyimini zenginleştirebilir.

expo-haptics modülü, çeşitli platformlarda (iOS ve Android) haptik geri bildirimleri tetiklemek için kullanılabilir. Bu, kullanıcı etkileşimlerini daha dokunsal ve zengin hale getirmek için uygulamalara ek bir katman eklemenize olanak tanır.

Bazı temel kullanım örnekleri şunları içerebilir:

javascript
Copy code
import * as Haptics from 'expo-haptics';

// Kısa bir titreşim
Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);

// Uzun bir titreşim
Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);

// Seçim geri bildirimi (yalnızca iOS)
Haptics.selectionAsync();
Bu örnekler, başarılı bir eylemi temsil etmek için kısa bir titreşim, bir ağır etki için uzun bir titreşim ve seçim işlemi için platforma özgü bir geri bildirim içermektedir. Haptik geri bildirim, kullanıcı arayüzünü daha zengin ve etkileşimli hale getirmek için kullanılabilir.

************************************
npm i zustand yukledik  https://github.com/pmndrs/zustand
zustand, React uygulamalarında durum yönetimi için kullanılan bir state yönetim kütüphanesidir. Temel olarak, React uygulamalarında bileşenler arasında veri paylaşımını ve güncellemelerini kolaylaştırmak için tasarlanmıştır.

zustand'ın temel özellikleri şunlardır:

Minimal ve Hafif:
zustand, minimalist bir API sunar ve küçük boyutludur. Karmaşıklığı azaltırken sade ve etkili bir şekilde durum yönetimi sağlar.

Bağımsız Durum Yönetimi:
Her bir zustand mağazası, kendi bağımsız durumunu ve işlevlerini yönetir. Bu, uygulamanın farklı bileşenlerinde bağımsız durumların kullanılmasını ve birbirinden etkilenmemesini sağlar.

React Bağımlılığı Yok:
zustand, React bağımlılığı olmadan kullanılabilir. Bu, React dışındaki diğer kütüphanelerle veya vanilla JavaScript projeleriyle entegrasyonu kolaylaştırır.

React Bağlamından Türetilmiş:
zustand, React bağlamına dayalı bir yapı üzerine inşa edilmiştir. Bu sayede, React bağlamının kullanımıyla benzer bir API sunar, ancak performans ve optimize edilmiş güncelleme stratejileri ile birlikte gelir.

React Hooks Desteği:
zustand, React Hooks'u destekler ve useState, useEffect gibi React Hooks'ları ile birlikte kullanılabilir.

İşte basit bir zustand örneği:

javascript
Copy code
import create from 'zustand';

const useStore = create((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
  decrement: () => set((state) => ({ count: state.count - 1 })),
}));

// Kullanım
function MyComponent() {
  const { count, increment, decrement } = useStore();

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
}
Bu örnekte, useStore adlı bir mağaza oluşturulmuş ve bu mağaza içinde count, increment ve decrement durumları tanımlanmıştır. useStore hook'u, bu durumları kullanarak bileşen içinde kullanılabilir. zustand, bu tür durumlar için daha karmaşık senaryoları da kolayca ele alabilir.
*************************
npm i react-native-confetti-cannon confettiyukldekik
sonolarak bu sayfadan doc kullandik
https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/showcase/swipeable/GmailStyleSwipeableRow.tsx