
npm i @gorhom/bottom-sheet komutu, @gorhom/bottom-sheet adlı bir npm paketini projenize eklemek için kullanılır. Bu paket, alt sayfa veya alt kart gibi içerikleri göstermek için kullanılan bir alt sayfa (bottom sheet) bileşeni sağlar. Bottom sheet, kullanıcıya daha fazla içeriği göstermek veya bir seçenek setini sunmak için ekranın alt kısmında beliren bir arayüz öğesidir.

@gorhom/bottom-sheet paketi, React Native projeleri için geliştirilmiş ve kullanımı oldukça basit bir alt sayfa bileşeni sunar. Bu tür bir bileşen, kullanıcının ekranın altından yukarıya doğru kaydırarak veya belirli bir olay tetiklendiğinde açılabilir. Genellikle sayfa içeriğini kapatmadan ek bir içeriği göstermek için kullanılır.

Kurulumu yaptıktan sonra, belirli bir olay veya kullanıcı etkileşimi ile alt sayfayı açabilir ve isteğe bağlı olarak içeriğini özelleştirebilirsiniz. Detaylı kullanım talimatlarına ve örnek kodlara @gorhom/bottom-sheet paketinin resmi belgelerinden veya örnek projelerinden ulaşabilirsiniz.
Hata aldik sonra   https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/

 1 npx expo install react-native-reanimated
 2"react-native-reanimated/plugin" bunu babel yapistirdik 
 3npx expo start -c

 import React from 'react';

const MyFlatList = () => {
  const data = [
    { id: '1', title: 'Item 1' },
    { id: '2', title: 'Item 2' },
    { id: '3', title: 'Item 3' },
    // ... Diğer öğeler
  ];

  const renderItem = ({ item }) => (
    <View>
      <Text>{item.title}</Text>
    </View>
  );

  const keyExtractor = (item) => item.id;

  return (
    <FlatList
      data={data}
      renderItem={renderItem}
      keyExtractor={keyExtractor}
    />
  );
};

export default MyFlatList;
useSharedValue fonksiyonu, bir değeri paylaşılan bir değer (shared value) haline getirir. Paylaşılan değerler, animasyonların ve diğer interaktif öğelerin değerlerini kontrol etmek için kullanılır. Bu değerler, işletim sistemi iş parçacığı dışında bulunan bir çalışma zamanında saklanır ve bu nedenle performanslı animasyonlar elde etmek için kullanılır.

Örneğin, useSharedValue fonksiyonunu kullanarak bir genişlik değeri oluşturabilir ve bu değeri animasyonlu bir şekilde güncelleyebilirsiniz. Aşağıdaki örnek, bir paylaşılan değeri genişlik (width) değeri olarak kullanarak bir View'in genişliğini animasyonlu bir şekilde değiştirir:

import React from 'react';
import { View, Text, Button } from 'react-native';
import { useSharedValue, withSpring } from 'react-native-reanimated';

const AnimatedView = () => {
  const flexWidth = useSharedValue(0);

  const handleAnimate = () => {
    flexWidth.value = withSpring(300, {}, (isFinished) => {
      // Animasyon tamamlandığında yapılacak işlemler
      if (isFinished) {
        console.log('Animasyon tamamlandı!');
      }
    });
  };

  return (
    <View>
      <View
        style={{
          width: flexWidth.value,
          height: 100,
          backgroundColor: 'blue',
        }}
      >
        <Text>Animasyonlu View</Text>
      </View>
      <Button title="Animate" onPress={handleAnimate} />
    </View>
  );
};

export default AnimatedView;
Bu örnekte, flexWidth adlı paylaşılan bir değer oluşturuluyor. Ardından, bir animasyon tetiklendiğinde flexWidth.value değeri, belirli bir animasyon efekti kullanılarak güncelleniyor. Bu, animasyonlu bir genişlik değişikliğine neden olur.





