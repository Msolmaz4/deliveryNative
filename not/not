
npm i @gorhom/bottom-sheet komutu, @gorhom/bottom-sheet adlı bir npm paketini projenize eklemek için kullanılır. Bu paket, alt sayfa veya alt kart gibi içerikleri göstermek için kullanılan bir alt sayfa (bottom sheet) bileşeni sağlar. Bottom sheet, kullanıcıya daha fazla içeriği göstermek veya bir seçenek setini sunmak için ekranın alt kısmında beliren bir arayüz öğesidir.

@gorhom/bottom-sheet paketi, React Native projeleri için geliştirilmiş ve kullanımı oldukça basit bir alt sayfa bileşeni sunar. Bu tür bir bileşen, kullanıcının ekranın altından yukarıya doğru kaydırarak veya belirli bir olay tetiklendiğinde açılabilir. Genellikle sayfa içeriğini kapatmadan ek bir içeriği göstermek için kullanılır.

Kurulumu yaptıktan sonra, belirli bir olay veya kullanıcı etkileşimi ile alt sayfayı açabilir ve isteğe bağlı olarak içeriğini özelleştirebilirsiniz. Detaylı kullanım talimatlarına ve örnek kodlara @gorhom/bottom-sheet paketinin resmi belgelerinden veya örnek projelerinden ulaşabilirsiniz.
Hata aldik sonra   https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/

 1 npx expo install react-native-reanimated
 2"react-native-reanimated/plugin" bunu babel yapistirdik 
 3npx expo start -c

 import React from 'react';

const MyFlatList = () => {
  const data = [
    { id: '1', title: 'Item 1' },
    { id: '2', title: 'Item 2' },
    { id: '3', title: 'Item 3' },
    // ... Diğer öğeler
  ];

  const renderItem = ({ item }) => (
    <View>
      <Text>{item.title}</Text>
    </View>
  );

  const keyExtractor = (item) => item.id;

  return (
    <FlatList
      data={data}
      renderItem={renderItem}
      keyExtractor={keyExtractor}
    />
  );
};

export default MyFlatList;
useSharedValue fonksiyonu, bir değeri paylaşılan bir değer (shared value) haline getirir. Paylaşılan değerler, animasyonların ve diğer interaktif öğelerin değerlerini kontrol etmek için kullanılır. Bu değerler, işletim sistemi iş parçacığı dışında bulunan bir çalışma zamanında saklanır ve bu nedenle performanslı animasyonlar elde etmek için kullanılır.

Örneğin, useSharedValue fonksiyonunu kullanarak bir genişlik değeri oluşturabilir ve bu değeri animasyonlu bir şekilde güncelleyebilirsiniz. Aşağıdaki örnek, bir paylaşılan değeri genişlik (width) değeri olarak kullanarak bir View'in genişliğini animasyonlu bir şekilde değiştirir:

import React from 'react';
import { View, Text, Button } from 'react-native';
import { useSharedValue, withSpring } from 'react-native-reanimated';

const AnimatedView = () => {
  const flexWidth = useSharedValue(0);

  const handleAnimate = () => {
    flexWidth.value = withSpring(300, {}, (isFinished) => {
      // Animasyon tamamlandığında yapılacak işlemler
      if (isFinished) {
        console.log('Animasyon tamamlandı!');
      }
    });
  };

  return (
    <View>
      <View
        style={{
          width: flexWidth.value,
          height: 100,
          backgroundColor: 'blue',
        }}
      >
        <Text>Animasyonlu View</Text>
      </View>
      <Button title="Animate" onPress={handleAnimate} />
    </View>
  );
};

export default AnimatedView;
Bu örnekte, flexWidth adlı paylaşılan bir değer oluşturuluyor. Ardından, bir animasyon tetiklendiğinde flexWidth.value değeri, belirli bir animasyon efekti kullanılarak güncelleniyor. Bu, animasyonlu bir genişlik değişikliğine neden olur.





https://console.cloud.google.com/apis/credentials?project=delivery-408723 burdan google map apii keu  aldik ve 
crendential  gitiribce api key var uyerine tila vr  API restrictions bunu ltindaki ikondan resrtiy key secip once places api yazip soleyleyip sonra libray etkinletirip burada tekraradan aratip okeyleyip save yapiyorsun
somraandoid secilip devam ediluor
https://github.com/FaridSafi/react-native-google-places-autocompleteburdan aiyur complete zptik

<ScrollView> genellikle React Native'de kullanılan bir bileşendir ve bir dizi içeriği (genellikle diğer bileşenleri veya görüntüleri) dikey olarak kaydırmak için kullanılır. 

import { SafeAreaView } from 'react-native-safe-area-context'
npm install react-native-safe-area-context

SafeAreaView bileşiği, React Native'de genellikle ekranın kenarlarına veya üst kısmına yerleştirilen diğer bileşenlerin, özellikle de iPhone X ve sonrasındaki cihazlardaki çentik veya altındaki ekranın altındaki sensör çubuğu gibi özel bölgelere karşı güvenli bir şekilde yerleştirilmesini sağlamak için kullanılır.

Bu bileşik, cihazın fiziksel kenarlarına yakın olan bileşenleri, çentik, kenar veya altındaki sensör çubuğu gibi bölgelerden uzak tutarak, içerideki içeriğin kesilmemesini sağlar. Bu, özellikle iOS cihazlarında önemlidir, çünkü bazı cihazlarda çentik veya sensör çubuğu ekranın bir kısmını kaplar ve içeriği bu bölgelerle örtmemek önemlidir.
********
<ScrollView horizontal> kodu, genellikle bir kullanıcı arayüzü oluştururken yatay olarak kaydırılabilir içerikleri içeren bir bileşeni tanımlamak için kullanılır. 
User
 <ScrollView horizontal showsVerticalScrollIndicator={false}>  
 showsVerticalScrollIndicator prop'unu, dikey kaydırma çubuğunun gösterilip gösterilmeyeceğini kontrol etmek için kullanabilirsiniz. Ancak, <ScrollView> öğesinin yatay yönde kaydırılabilir olduğu bir durumda, dikey kaydırma çubuğu genellikle gereksizdir. Bu nedenle, showsVerticalScrollIndicator={false} kullanarak dikey kaydırma çubuğunu gizleyebilirsiniz.

 ***************
 
TouchableOpacity, React Native uygulamalarında kullanıcı etkileşimleri için kullanılan bir dokunma (tıklama) öğesidir

*******************

asChild prop'u, Link bileşenini kullanırken, bir bağlantıyı sadece bir çocuk öğe (child) olarak ele almasını sağlar. Bu, bağlantıya ek özellikler eklemek veya özel davranışlar uygulamak istediğinizde kullanışlıdır.

Normalde, Link bileşeni bir dokümanın içinde bir bağlantıyı temsil etmek için kullanılır ve içerideki tüm öğeleri bir bağlantıyı takip eden öğeler olarak ele alır. Ancak, bazen bir bağlantının yalnızca bir öğe (örneğin bir düğme veya bir resim) olmasını ve tıklama olaylarını bu öğe üzerinde yönetmeyi tercih edebilirsiniz. İşte bu durumda asChild prop'u devreye girer.
import React from "react";
import { Link } from "expo-router";

const ExampleComponent = () => {
  return (
    <Link href="/details" asChild>
      <button>Detayları Görüntüle</button>
    </Link>
  );
};

export default ExampleComponent;
Bu örnekte, asChild prop'u kullanılarak <button> öğesi, Link bileşeninin içinde yalnızca bir çocuk öğe olarak ele alınır ve bağlantının tıklama olayları bu düğme üzerinde yönetilir. Bu, özel bir tasarım veya özel davranışa sahip bir bağlantı oluşturmanın bir yoludur.ben burda reataurant tilayinca dertailsr gitemdi bende bunu unutmusum 
****************
******************
<ParallaxScrollView/> bunu ilk olrak details cagirfik hata olduk bunum coymek icin consoldaki hatafdanbulduk 
bir npm yukledik 
sonra parallax stules olan require iolln yeride sildik dikkat et
npm i deprecated-react-native-prop-types
npm i deprecated-react-native-prop-types@2.2.0